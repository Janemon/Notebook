1 **how to stopPropagation?**
> Js/Jquery: `event.stopPropagation()`  
> Jquery: `return false`;  

-----------------------------------------------------------------

2 **how to preventDefault?**
> JS/Jquery: `event.preventDefault()`  
> Js/Jquery: `return false`;  

-----------------------------------------------------------------

3 **Operator precedence**  
the **last** serveral operator:  
1 `,`  
2 `yield*`  
3 `yield`  
4 `...`  
5 `=`  

-----------------------------------------------------------------

4 **Why `map(x => x*2) and map((x)=> {x*2})` has different result?**  
**answer**: the first one has a **default "return"**. But the second one we use `{...}` so we **didn't return anything**, so we only get "undefined".

-----------------------------------------------------------------

5 **bind?**  
**answer**: `call, apply, bind`, all can change the `this` pointer(or called context) and take the passed arguments. But the bind has a different place compared with the front two. Which is that bind will **construct a new function** which "this" has changed, but `call` and `apply` don't create a new function, which are **just call right now**.

-----------------------------------------------------------------

6 **Object(...) and Object.create()?**  
**answer**: the first one can **pack a non-object** to be a object, but the other just can create a instance of a object.

-----------------------------------------------------------------

7 some callback function has passed in some arguments by default, not just one in you see. For example, the `Array.prototype.map(callback function())`, has passed into three argument in it, we we always use callback(x), so we **just use the firest one argument, then throw out the rest argument**  

-----------------------------------------------------------------

8 **event.target** point the element who trigger event  
　**event.currentTarget** point the element who was added the listener  

-----------------------------------------------------------------

9 **Callback function, I think it has somthing with Js enginer and browser eningier?**  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-----------------------------------------------------------------

10  
```javascript

var clientData={
        fullname: "not set",
        setUserName: function(firstname, lastname){
               this.fullname=firstname+" "+lastname
        }
}
function getUserInput(firstname, lastname, callback){
        callback(firstname, lastname)
}

getUserInput("li", "chen", clientData.setUserName)
console.log(clientData.fullname)
console.log(window.fullname)

-----------------------------------------------------------------

function foo(){
    console.log(this.a)
    console.log(Object.prototype.toString.call(this))
}
function doFoo(fn){
    fn();
}
var obj={// the let
    a: 2,
    foo: foo
}
var a="global" // the let
doFoo(obj.foo)
obj.foo()

/* If using let, what happen? => Cofusing? Actually, the "let" don't let variable mount in global object. */
-----------------------------------------------------------------

function doFoo(fn){
    fn();
}
var obj={
    a:2,
    foo:function(){
        console.log(this.a)
        console.log(Object.prototype.toString.call(this))
    }
}
var a="global"
doFoo(obj.foo)
obj.foo()

/* motherfucker, the function as the param in other function. */

-----------------------------------------------------------------

var obj={
    a:2,
    foo:function(){
        console.log(this.a)
        console.log(Object.prototype.toString.call(this))
    }
}
var a="global"
function fn(){
    obj.foo()
}
function fnn(){
    let a="here is fnn"
    obj.foo()
}
fn()
fnn()

-----------------------------------------------------------------

function doFoo(fn){
    let a="here is doFoo"
    fn();
}
var obj={
    a:2,
    foo:function(){
        let a="here is foo"
        console.log(this.a)
        console.log(Object.prototype.toString.call(this))
    }
}
var a="global"
doFoo(obj.foo)

/* Don't think "this" will be the doFoo, it still is global */

```

**Answer**:  
1. `this` is a reference(出处，参数) which can be anything of object: number, string, function ..... And if no specification, it will be the object who offer it's context.  
For example:  
```javascript
function bar(){
    console.log(Object.prototype.toString.call(this))
}
function fn(){
    console.log("I am jaxon")
}
bar.call(7)
bar.call("hello")
bar.call(["byebye"])
bar.call(fn)
```
2. I don't know why but if you pass function as parameter in other function, the `this` in passed function will reference the global object no mater all.  

-----------------------------------------------------------------

11 **Object and function all have their prototype? Not only function?**  
**Answer:** Actually only **function-object** has their prototype! **Only when** you add it by yourself to other object. But some functiones don't has prototype for example the `alert` and `Math.sqrt`... these **built-in function**.

-----------------------------------------------------------------

**Note**: 迭代器对象拥有可迭代的方法，但是 `for` 充其量只能算是迭代的方法 (*_*)，他没有一个可迭代对象啊!!

-----------------------------------------------------------------

12  `for...of...` 使用迭代器的什么？也就是说他如何消费迭代器？  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

-----------------------------------------------------------------


13 **一些ES6模块的例子**：  
<mark>Note:</mark> 作为模块的script文件必须的表明， `<script src="./index.js" type="module"></script>`
```javascript
(1)  
1-1  
export function foo(){...}
export function boo(){...}
export function voo(){...}
1-2  
function foo(){...}
function boo(){...}
function voo(){...}
export { foo as default, boo, voo} // 相比上面每个都 export 一下，这种方法更好因为能一目了然.  

(2)  
2-1  
// 输出的接口应该是与内部的变量是一一对应的关系而不能是同一物，因为这是个“接口”。因为是个接口，所以和动态更新内部数据，而不像CommonJS的那么只是数据的缓存而已。  
let m=1
export m // false
export 1 // false
export {m} // true
export let m=1 // true
export { m as n} // true

function foo(){...}
export foo // false
export function foo(){...} // true
export {foo} // true
export { foo as getName } // true


(3)  
// export 和 import 都只能是放在文件的顶层作用域中，而不能是其他任何的函数中，否则报错！！！  

function foo(){
    let name="hellobye"
    export {name}
}
foo() // false


(4)  
// 我们从文件中导入的变量必须使用源文件中指定的变量才行  

// profile.js
export {firstname, lastname, ...}
// index.js
import {firstname, lastname, ...} from "./profile.js"
function show(ele){
    ele.textconet=`${firstname}-${lastname}`;
}


(5)  
// import 所引入的变量是不允许修改的，因为这些变量就是输入接口, 但是变量的属性可以修改。但是不建议这样做，因为这样难于排查。最好所以import的变量都单做只读变量处理  

import {a} from  "./xxx.js"
a={...} //false
a.name="..." //true


(6)  
// import 命令是具有“提升”作用的，这是因为import的调用比变量的执行要早，而这就是因为import是在编译时候就执行了，在代码执行前.


(7)  
// 由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构.

import {"f" + "o"} from "servant" // false

let module="servant"
import default from module // false

if(x==1){
    import {foo} from  "servant"
}else{
    import {boo} from  "servant"
}  // false


(8)  
// import 如果出现相同的模块，会加载多次，但其实最好会合并到一起一次执行  

import {foo} from "service" // 如果直接写文件名那么需要做相应的配置
import {boo} from "service"
// equals to
import {foo, boo} from "service"


(9)  
// 模块一个一个这样加载过于麻烦，那么我们可以使用一个整体来进行加载  
// previous.js
export foo(){...}
export boo(){...}

9-1  
// main.js
import {foo, boo} from "./previous.js"
foo()
boo()

9-2  
// main.js
import * as Tool from "./previous.js"
Tool.foo()
Tool.boo()


(10)  
// 一个模块有没有默认的接口？ 有且只有一个！！！  
// tool.js
export default function(){...}

10-1  
// main.js
1-  import box from "./tool.js"  
2-  import { default as box } from "./too.js"  
/*这样有一定程度上的方便，我们不用知道具体的函数名，直接把它导出而且可以随意赋个名称给他,还不用括号，因为是唯一的？*/

10-2  
// 当然不仅仅只有匿名函数可以default  
1-  export default function foo(){...}  
2-  function foo(){...}; export default foo;  
3-  function boo(){...}; export { boo as default }

10-3  
// export default 本质上是输出一个声明变量，而且是把变量后面的值赋给这个变量的，所以他后面是不能变量声明语句的
1-  export default let a="yes!" // false  
2-  let a="yes!" export  default a;  

10-4  
// too.js
1-  export default function foo(){...}
    function boo(){...}
    function voo(){...}
    export {boo, voo}

2-  function foo(){...}
    function boo(){...}
    function voo(){...}
    export {foo as default, boo, voo}

// main.js
    import boss, {boo, voo} from "./tool.s"


(11)  
// 如果想把各种模块中的某些函数集中到同一个模块中，其实这个模块就是一个中转站  

1- export {foo, boo} from "Tool" // 注意其实该模块并没有引入foo，boo 这两个函数，只是对外做了转发而已.
   // equals to
   import {foo, boo} from "Tool"
   export {foo, boo}

2- export * from  "Tool"

3- export {foo as tool} from "Tool"

4- export {default} from "Tool"

5- export {foo as default} from "Tool"

6- export {default as tool} from "Tool"

7- export * from "Tool"
   export var PI=3.0
   export default function(){...}
   // 该模块自己可以用自己设置的默认接口，忽略掉转接中模块中的默认函数接口


(12)  
// 跨模块常量共享  

12-1  
// constant.js
   export const A=1;
   export const B=2;
   export const C=3;
// main.s
   import * as Constants from "constant"
   console.log( Constants.A)
   console.log( Constants.B)

12-2  
// 如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。

// constants/db.js
export const db={
    url:"...",
    admin_username:"...",
    admin_passwords:"...",
}
// constants/users.js
export const users={"root", "admin", "customer", ...}

// constants/index.js
export {db} from "./db.js"
export {users} from "./users.js"

// main.js
import {db, users} from "./constants/index.js"


(13)  
// 听说还有个 import(param) 可以填补 import 不能动态加载的缺陷！  







```

那么 JavaScript 在没有官方支持 module 模块时，我们是如何做的？  
1. 在我觉的平时使用的 js的script引用就是利用了模块的概念, 但是他是把函数挂载到全局对象中，别的文件再能使用，这是一种trick！！  
2. 其实在ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。  
<mark>Note: </mark>CommonJS 模块其实是一个对象, 而且他是运行是加载的, 所以没法做编译优化. 而 ES6 模块是静态的，所以会得到编译时的许多优化: 宏和类型检查。而且还有其他好处：将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性注意： ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。比如：  
```javascript
// CommonJS
let {stat, exist, readFile} = require("./servant.js")

// equals to
let _fs=require("./servant.js")
let stat=_fs.stat
let exist=_fs.exist
let readFile=_fs.readFile
// 他会加载这个对象模块中的所有方法在在确定后返回  


// ES6
import {stat, exist, readFile} from "./servant.js"
// 仅仅是加载 servant.js 文件中的 符合目标的三个变量，而不会加载其他的。

/*也可以看到 CommonJS module 是使用 require 引入的, 而 ES6 module 是用 import 引入的*/

```




-----------------------------------------------------------------

14 **一些ES6 class 使用的例子**：  

```javascript
class Foo {
    constructor(name, age){
        this.name=name
        this.age=age
    }
    getName(){
        console.log(this.name)
    }
}

class Boo extends Foo {
   constructor(name, age, height){
    super(name, age)
    this.height=height
   }
}

class Voo extends Foo {
    getName(){
        super.getName()
        console.log(this.age)
    }
}


class myArray extends Array {
    first(){
        return this[0]
    }
    last(){
        return this[this.length-1]
    }
}
// So if you add some new which doesn't need super. But if you add some new into the exsited things, you must super.

class Too {
    static cool(){
        console.log("cool")
    }
    wow(){
        console.log("wow")
    }
}

class Roo extends Too {
    static awsome(){
        super.cool()
        console.log("awsome!")
    }
}
// the static function cann't export outside, so we cann't use it but we can use inside.


```

-----------------------------------------------------------------

15 **如何使用 `new.target`?**  
xxxxxxxxxxxxxxxxxxxxxxxxxxx

-----------------------------------------------------------------

16 **Array.reduce(); Array.some(); Array.every()?**  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

-----------------------------------------------------------------

17 **what're difference bwtween Array.of() and Array.from()?**  
单个元素与可迭代的复杂对象之间的区别：  

```javascript
let arr1=Array.of({length: 4})
let arr2-Array.from({length: 4})
```
-----------------------------------------------------------------

18 **what's diffrence between `textcontent` and `innerHTML` and `innerText` and the `nodeValue`**
1. `textContent` just like it's literal meaning, it just get the text' content, and the `innerHTML` not only get the text but also get the html's tag.  

2. `textContent` will get the all text-content include the tag like `<style>` and `<script>`. But the `innerText` not!

3. The `innerText` is affected by `Css` but `textContent` not, `Css` will affect the browser's function.

4. Actually, the `nodeValue` only the text-node has value, in other word, the normal tag whose `nodeValue` is **null**


19 how to recognize the element's type?
1. you must know that the text-node not a tag, which is a string of **wordtext**.  

2. the offen-used is `Node.ELEMENT_NODE`=>`1`; And `Node.TEXT_NODE`=>`3`; And `Node.COMMENT_NODE`=>`8`; And `Node.DOCUMENT_NODE`=>`9`  

20 **how to get the element's build-in attribute?**  

21 **what's different between `input` and `button`?**  

22 **what're bubbling, capture and proxy?**  

-----------------------------------------------------------------

23 **how to make a simple number clock and the normal clock?**  

1.**whole**  
```javascript
function clock(){
  let box=document.getElementById("clock")
  let current=new Date()
  box.innerHTML=current.toLocaleTimeString()
}
setInterval(clock, 1000)
clock()
```  

2.**core**  
```javascript
let secondsHand=document.getElementById("secondHand")
let minsHand=document.getElementById("minutesHand")
let hoursHand=document.getElementById("hoursHand")

function showTime(){
  let current=new Date()

  let seconds=current.getSeconds()
  let secondsDegree=seconds*(360/60)
  secondsHand.style.transform=`rotate${secondsDegree}deg`
  let mins=current.getMinutes()
  let minsDegree=(mins+seconds/60)*(360/60)
  minsHand.style.transform=`rotate${minsDegree}deg`
  let hours=current.getHours()
  let hoursDegree=(hours+mins/60)*(360/12)
  hoursHand.style.transform=`rotate${hoursDegree}deg`
}
setInterval(showTime, 1000)
showTime()
```
```css
transition: all 0.05s;
transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1); /*the tick-tack effection*/;
```

-----------------------------------------------------------------

<mark>NOTE:</mark>`label` for `id` not for `name`!!! And the other thing we should note is that we no only the `radio`box but `checkbox`, we better set the box's name!!!   

-----------------------------------------------------------------

